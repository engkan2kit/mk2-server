#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mean-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */
var MonitoringDevice = require('../models/MonitoringDevice.js');

/* Get All monitoring devices. */
  
  

var mongoose = require('mongoose');
mongoose.Promise = require('bluebird');
mongoose.connect('mongodb://localhost/mk2-data', {promiseLibrary: require('bluebird') })
  .then(() =>  console.log('connection succesful'))
  .catch((err) => console.error(err));

 var cntr=0;
function intervalFunc() {
  io.emit("message",cntr.toString());
  cntr=cntr+1;/*
  */
  MonitoringDevice.find({},{"_id":0,"__v":0},function(err,monDevices){
    nodeDevices=[];
    if(err) return next(err);
    
    for(var index in monDevices){
      device=JSON.stringify(monDevices[index]);
      device=JSON.parse(device);
      rnd=Math.random()-0.5;
      if (device.v!=null)
        device.v=device.v+rnd*100;
      rnd=Math.random()-0.5;
      if (device.a!=null)
        device.a=device.a+rnd*100;
      if (device.w!=null)
        device.w=device.w+rnd*200;
      nodeDevices.push(device);
      console.log(device);
      
    }
    data={
      timeStamp: Date.now.toString(),
      nodes:nodeDevices
    }
    //console.log(data);
    io.emit("realtime",data);
  });
  
}

setInterval(intervalFunc, 3000);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.on('connection', function(socket){
  console.log('a user connected');
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
